#include<iostream>
using namespace std;
int addressOfStreet();
bool areDigitsDifferent(int num);
bool isDigitAtThousandsPlaceThreeTimesThedigitAtTenPlace(int num);
bool isSumEqualsToTwentySeven(int num);
int main()
{
	int address = addressOfStreet();
	cout <<"The Riddle has planed to stag his show at street #"<<" "<<address << "\n";
}
int addressOfStreet()
{
	int puzzle,firstCondition,secondCondition,thirdCondition,address ;
	for (puzzle = 1000; puzzle < 9999; puzzle = puzzle + 1)
	{
		if ((puzzle % 2) != 0)
		{
			firstCondition =areDigitsDifferent(puzzle);
			secondCondition=isDigitAtThousandsPlaceThreeTimesThedigitAtTenPlace(puzzle);
			thirdCondition =isSumEqualsToTwentySeven(puzzle);
			if ((firstCondition == true) && (secondCondition == true) && (thirdCondition == true))
			{
				address = puzzle;
				break;
			}
		}
	}
	return address;
}
bool areDigitsDifferent(int num)
{   
	int r,rem=0,c=0,digit1,digit2,digit3,digit4; bool flag = true;
	while (num != 0)
	{
		r = num % 10;
		c = c + 1;
		if (c == 1)
		{
			digit1 = r;
		}
		if (c == 2)
		{
			digit2 = r;
		}
		if (c == 3)
		{
			digit3 = r;
		}
		if (c == 4)
		{
			digit4 = r;
		}
		num = num / 10;
	}
	if ((digit1 == digit2 || digit1 == digit3 || digit1 == digit4) || (digit2 == digit3 || digit2 == digit4) || (digit3 == digit4))
	{
		flag = false;
	}
	else
	{
		flag = true;
	}
	return flag;

}
bool isDigitAtThousandsPlaceThreeTimesThedigitAtTenPlace(int num)
{  
	int rem,c=0,digitAtTenPlace, digitAtThousandsPlace;
	while (num != 0)
	{
		rem = num % 10;
		c = c + 1;
		if (c == 2)
		{
			digitAtTenPlace = rem;
		}
		if (c == 4)
		{
			digitAtThousandsPlace = rem;
		}
		num = num / 10;
	}
	if (digitAtTenPlace*3 == digitAtThousandsPlace)
		return true;
	else
		return false;
}
bool isSumEqualsToTwentySeven(int num)
{
	int sum = 0,rem;
	while (num != 0)
	{
		rem = num % 10;
		sum = sum + rem;
		num = num / 10;
	}
	if (sum == 27)
		return true;
	else
		return false;
}
